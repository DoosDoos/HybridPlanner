// <auto-generated />
using System;
using HybridPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HybridPlanner.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230107204306_updatedServiceClass")]
    partial class updatedServiceClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HybridPlanner.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestEstimate")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PartyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("HybridPlanner.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PartyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("HybridPlanner.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("HybridPlanner.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HybridPlanner.Models.Location", b =>
                {
                    b.HasOne("HybridPlanner.Models.Party", "Party")
                        .WithMany("Location")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("HybridPlanner.Models.Party", b =>
                {
                    b.HasOne("HybridPlanner.Models.Party", null)
                        .WithMany("Parties")
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("HybridPlanner.Models.Service", b =>
                {
                    b.HasOne("HybridPlanner.Models.Location", "Location")
                        .WithMany("services")
                        .HasForeignKey("LocationId");

                    b.HasOne("HybridPlanner.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.Navigation("Location");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("HybridPlanner.Models.User", b =>
                {
                    b.HasOne("HybridPlanner.Models.Location", "Location")
                        .WithMany("users")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HybridPlanner.Models.Location", b =>
                {
                    b.Navigation("services");

                    b.Navigation("users");
                });

            modelBuilder.Entity("HybridPlanner.Models.Party", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Parties");
                });
#pragma warning restore 612, 618
        }
    }
}
